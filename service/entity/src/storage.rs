//! SeaORM Entity. Generated by sea-orm-codegen 0.8.0

use crate::UNIT_WEIGHT;
use sea_orm::{entity::prelude::*, IntoActiveModel, NotSet, Set, Unchanged};
use serde::{Deserialize, Serialize};
use serde_with::{serde_as, DisplayFromStr};

#[serde_as]
#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize)]
#[sea_orm(table_name = "storage")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    #[serde_as(as = "DisplayFromStr")]
    pub id: i64,
    #[serde_as(as = "DisplayFromStr")]
    pub warehouse_id: i64,
    pub store_date: Date,
    pub license_plate_number: String,
    pub quantity: i32,
    pub ton: f64,
    pub duration: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::warehouse::Entity",
        from = "Column::WarehouseId",
        to = "super::warehouse::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Warehouse,
}

impl Related<super::warehouse::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Warehouse.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

#[serde_as]
#[derive(Debug, Deserialize)]
pub struct InsertModel {
    #[serde_as(as = "DisplayFromStr")]
    pub warehouse_id: i64,
    pub store_date: Date,
    pub license_plate_number: String,
    pub quantity: i32,
}

impl IntoActiveModel<ActiveModel> for InsertModel {
    fn into_active_model(self) -> ActiveModel {
        ActiveModel {
            id: NotSet, // 后续设置雪花ID
            warehouse_id: Set(self.warehouse_id),
            store_date: Set(self.store_date),
            license_plate_number: Set(self.license_plate_number),
            quantity: Set(self.quantity),
            ton: Set(UNIT_WEIGHT * (self.quantity as f64)),
            duration: NotSet,
        }
    }
}

#[serde_as]
#[derive(Debug, Deserialize)]
pub struct UpdateModel {
    #[serde_as(as = "DisplayFromStr")]
    pub id: i64,
    pub store_date: Date,
    pub license_plate_number: String,
    pub quantity: i32,
}

impl IntoActiveModel<ActiveModel> for UpdateModel {
    fn into_active_model(self) -> ActiveModel {
        ActiveModel {
            id: Unchanged(self.id),
            warehouse_id: NotSet,
            store_date: Set(self.store_date),
            license_plate_number: Set(self.license_plate_number),
            quantity: Set(self.quantity),
            ton: Set(UNIT_WEIGHT * (self.quantity as f64)),
            duration: NotSet,
        }
    }
}
