//! SeaORM Entity. Generated by sea-orm-codegen 0.8.0

use crate::UNIT_WEIGHT;
use sea_orm::{entity::prelude::*, IntoActiveModel, NotSet, Set, Unchanged};
use serde::{Deserialize, Serialize};
use serde_with::{serde_as, DisplayFromStr};

#[serde_as]
#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize)]
#[sea_orm(table_name = "shipping_item")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    #[serde_as(as = "DisplayFromStr")]
    pub order_num: i64,
    #[sea_orm(primary_key, auto_increment = false)]
    pub nth: i16,
    pub shipment_date: Date,
    pub quantity: i32,
    pub ton: f64,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::shipping_order::Entity",
        from = "Column::OrderNum",
        to = "super::shipping_order::Column::Num",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    ShippingOrder,
}

impl Related<super::shipping_order::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ShippingOrder.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Debug, Deserialize)]
pub struct InsertModel {
    pub shipment_date: Date,
    pub quantity: i32,
}

impl IntoActiveModel<ActiveModel> for InsertModel {
    fn into_active_model(self) -> ActiveModel {
        ActiveModel {
            order_num: NotSet, // 后续写入雪花ID
            nth: NotSet,       // 通过迭代器计算
            shipment_date: Set(self.shipment_date),
            quantity: Set(self.quantity),
            ton: Set(UNIT_WEIGHT * (self.quantity as f64)),
        }
    }
}

#[serde_as]
#[derive(Debug, Deserialize)]
pub struct UpdateModel {
    #[serde_as(as = "DisplayFromStr")]
    pub order_num: i64,
    pub nth: i16,
    pub shipment_date: Date,
    pub quantity: i32,
}

impl IntoActiveModel<ActiveModel> for UpdateModel {
    fn into_active_model(self) -> ActiveModel {
        ActiveModel {
            order_num: Unchanged(self.order_num),
            nth: Unchanged(self.nth),
            shipment_date: Set(self.shipment_date),
            quantity: Set(self.quantity),
            ton: Set(UNIT_WEIGHT * (self.quantity as f64)),
        }
    }
}
